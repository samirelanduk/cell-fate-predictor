clusters <- quickCluster(counts(y2), method="igraph")
clusters <- quickCluster(counts(y2), method="hclust")
clusters <- quickCluster(counts(y2), method="hclust", min.size = 5)
clusters
clusters <- quickCluster(counts(y2), method="hclust", min.size = 10)
clusters
clusters <- quickCluster(counts(y2), method="hclust", min.size = 3)
clusters
clusters <- quickCluster(counts(y2), method="igraph", min.size = 3)
install.packages("irlba")
clusters <- quickCluster(counts(y2), method="igraph", min.size = 3)
clusters
clusters <- quickCluster(counts(y2), method="igraph")
clusters
clusters <- quickCluster(counts(y2), method="igraph", min.size = 2)
clusters
pca <- prcomp(logcounts(y2))
pca <- prcomp(t(logcounts(y2)))
plot(pca$x[,1], pca$x[,2], pch = 19)
plot(pca$x[,1], pca$x[,2], pch = 19, col = clusters)
plot(pca$x[,1], pca$x[,1], pch = 19, col = clusters)
plot(pca$x[,1], pca$x[,3], pch = 19, col = clusters)
y2
q()
library(devtools)
install_github("AckerDWM/gg3D")
library(gg3D)
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() +
axes_3D() +
stat_3D()
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_bw() +
axes_3D() +
stat_3D()
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() +
axes_3D() +
stat_3D()
theta=0
phi=20
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
axes_3D(theta=theta, phi=phi) +
stat_3D(theta=theta, phi=phi) +
axis_labs_3D(theta=theta, phi=phi, size=3,
hjust=c(1,1,1.2,1.2,1.2,1.2),
vjust=c(-.5,-.5,-.2,-.2,1.2,1.2)) +
labs_3D(theta=theta, phi=phi,
hjust=c(1,0,0), vjust=c(1.5,1,-.2),
labs=c("Petal width", "Sepal width", "Petal length")) +
theme_void()
theta=10
phi=20
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
axes_3D(theta=theta, phi=phi) +
stat_3D(theta=theta, phi=phi) +
axis_labs_3D(theta=theta, phi=phi, size=3,
hjust=c(1,1,1.2,1.2,1.2,1.2),
vjust=c(-.5,-.5,-.2,-.2,1.2,1.2)) +
labs_3D(theta=theta, phi=phi,
hjust=c(1,0,0), vjust=c(1.5,1,-.2),
labs=c("Petal width", "Sepal width", "Petal length")) +
theme_void()
theta=10
phi=50
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
axes_3D(theta=theta, phi=phi) +
stat_3D(theta=theta, phi=phi) +
axis_labs_3D(theta=theta, phi=phi, size=3,
hjust=c(1,1,1.2,1.2,1.2,1.2),
vjust=c(-.5,-.5,-.2,-.2,1.2,1.2)) +
labs_3D(theta=theta, phi=phi,
hjust=c(1,0,0), vjust=c(1.5,1,-.2),
labs=c("Petal width", "Sepal width", "Petal length")) +
theme_void()
theta=10
phi=0
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
axes_3D(theta=theta, phi=phi) +
stat_3D(theta=theta, phi=phi) +
axis_labs_3D(theta=theta, phi=phi, size=3,
hjust=c(1,1,1.2,1.2,1.2,1.2),
vjust=c(-.5,-.5,-.2,-.2,1.2,1.2)) +
labs_3D(theta=theta, phi=phi,
hjust=c(1,0,0), vjust=c(1.5,1,-.2),
labs=c("Petal width", "Sepal width", "Petal length")) +
theme_void()
theta=50
phi=0
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
axes_3D(theta=theta, phi=phi) +
stat_3D(theta=theta, phi=phi) +
axis_labs_3D(theta=theta, phi=phi, size=3,
hjust=c(1,1,1.2,1.2,1.2,1.2),
vjust=c(-.5,-.5,-.2,-.2,1.2,1.2)) +
labs_3D(theta=theta, phi=phi,
hjust=c(1,0,0), vjust=c(1.5,1,-.2),
labs=c("Petal width", "Sepal width", "Petal length")) +
theme_void()
theta=90
phi=0
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
axes_3D(theta=theta, phi=phi) +
stat_3D(theta=theta, phi=phi) +
axis_labs_3D(theta=theta, phi=phi, size=3,
hjust=c(1,1,1.2,1.2,1.2,1.2),
vjust=c(-.5,-.5,-.2,-.2,1.2,1.2)) +
labs_3D(theta=theta, phi=phi,
hjust=c(1,0,0), vjust=c(1.5,1,-.2),
labs=c("Petal width", "Sepal width", "Petal length")) +
theme_void()
q()
?DESeq2::vst
q()
library(dplyr)
my_data <- iris
sepl <- iris$Sepal.Length
petl <- iris$Petal.Length
res.man <- manova(cbind(Sepal.Length, Petal.Length) ~ Species, data = iris)
summary.aov(res.man)
res.man <- manova(cbind(Sepal.Length, Petal.Length, Sepal.Width, Petal.Width) ~ Species, data = iris)
summary.aov(res.man)
library(crayon)
st <- sample(c("A", "T", "C", "G"), 100, replace = T)
library(pandaR)
BiocManager::install("pandaR", version = "3.8")
library(pandaR)
data(pandaToyData)
pandaResult <- panda(pandaToyData$motif, pandaToyData$expression, pandaToyData$ppi)
pandaToyData$expression
?pandaToyData
pandaToyData$motif
pandaToyData$ppi
tail(pandaToyData$motif)
unique(pandaToyData$motif$V3)
unique(pandaToyData$ppi$V3)
pandaResult
pandaResult$regNet
pandaR::plot.panda(pandaResult)
regNet(pandaResult)
pandaResult@regNet
head(pandaResult@regNet)
dim(pandaResult@regNet)
pandaResult
dim(pandaResult@coregNet)
pandaResult@coregNet[1:5, 1:5]
dim(pandaResult@coopNet)
pandaResult@coopNet[1:5, 1:5]
?panda
length(union(pandaToyData$ppi$V1, pandaToyData$ppi$V2))
library(ggplot2)
val <- rnorm(1000, mean = 1.7)
hist(val)
val <- rnorm(1000, mean = 1.7, sd = 0)
hist(val)
val <- rnorm(1000, mean = 1.7, sd = 0.5)
hist(val)
val <- rnorm(1000, mean = 1.7, sd = 0.3)
hist(val)
ggplot(tibble(height = val), aes(height)) + geom_density() + theme_bw()
library(dplyr)
ggplot(tibble(height = val), aes(height)) + geom_density() + theme_bw()
ggplot(tibble(height = val), aes(height)) + geom_density(adjust = 2) + theme_bw()
ggplot(tibble(height = val), aes(height)) + geom_density(adjust = 21.5) + theme_bw()
ggplot(tibble(height = val), aes(height)) + geom_density(adjust = 1.5) + theme_bw()
ggplot(tibble(height = val), aes(height)) + geom_density(adjust = 1.5) + labs(x = "Height (m)", y = "Density") + theme_bw()
val <- rnorm(1000, mean = 1.9, sd = 0.3)
A <- rnorm(1000, mean = 1.7, sd = 0.3)
B <- rnorm(1000, mean = 1.9, sd = 0.3)
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height)) + geom_density(adjust = 1.5) + labs(x = "Height (m)", y = "Density") + theme_bw()
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat)) + geom_density(adjust = 1.5) + labs(x = "Height (m)", y = "Density") + theme_bw()
B <- rnorm(1000, mean = 2.1, sd = 0.3)
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat, fill = nat)) + geom_density(adjust = 1.5) + labs(x = "Height (m)", y = "Density") + theme_bw()
B <- rnorm(1000, mean = 2.1, sd = 0.3)
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat, fill = nat)) + geom_density(adjust = 1.5) + labs(x = "Height (m)", y = "Density") + theme_bw()
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat, fill = nat)) + geom_density(adjust = 1.5, alpha = 0.75) + labs(x = "Height (m)", y = "Density") + theme_bw()
B <- rnorm(1000, mean = 1.95, sd = 0.3)
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat, fill = nat)) + geom_density(adjust = 1.5, alpha = 0.75) + labs(x = "Height (m)", y = "Density") + theme_bw()
A <- rnorm(1000, mean = 1.65, sd = 0.3)
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat, fill = nat)) + geom_density(adjust = 1.5, alpha = 0.75) + labs(x = "Height (m)", y = "Density") + theme_bw()
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat, fill = nat)) + geom_density(adjust = 2, alpha = 0.75) + labs(x = "Height (m)", y = "Density") + theme_bw()
ggplot(tibble(height = c(A, B), nat = c(rep("Latin-Americans", 1000), rep("Dutch", 1000))), aes(height, group = nat, fill = nat)) + geom_density(adjust = 2, alpha = 0.75) + labs(x = "Height (m)", y = "Density") + theme_bw() + theme(legend.position = "top")
q()
library(ggplot2)
library(dplyr)
tb <- tibble(v = rnorm(1000, mu = 2, sd = 0.3))
tb <- tibble(v = rnorm(1000, mean = 2, sd = 0.3))
ggplot(tb, aes(v)) + geom_density() + labs(x = expression(delta(k)), y = "Density") +theme_bw()
ggplot(tb, aes(v)) + geom_density() + labs(x = expression(Delta(k)), y = "Density") +theme_bw()
ggplot(tb, aes(v)) + geom_density() + labs(x = expression(Delta(k)), y = "Density") +theme_bw()
ggplot(tb, aes(v)) + geom_density(adjust = 0.5) + labs(x = expression(Delta(k)), y = "Density") +theme_bw()
ggplot(tb, aes(v)) + geom_density(adjust = 2.5) + labs(x = expression(Delta(k)), y = "Density") +theme_bw()
q()
library(ggplot2)
library(dplyr)
tb <- tibble(v=rnorm(1000, mean = 2, sd = 0.3))
ggplot(tb, aes(v)) + geom_density(adjust = 2.5) + labs(x = expression(Delta(k)), y = "Density") +theme_bw()
ggplot(tb, aes(v)) + geom_density(adjust = 2.5) + labs(x = expression(Deltak), y = "Density") +theme_bw()
ggplot(tb, aes(v)) + geom_density(adjust = 2.5) + labs(x = expression(Delta~k), y = "Density") +theme_bw()
tb <- tibble(v=rnorm(10000, mean = 2, sd = 0.3))
ggplot(tb, aes(v)) + geom_density(adjust = 2.5) + labs(x = expression(Delta~k), y = "Density") +theme_bw()
ggplot(tb, aes(v)) + geom_density(adjust = 2.5) + labs(x = expression(Delta k), y = "Density") +theme_bw()
q()
library(tximport)
?tximport::tximport
library(tximportData)
BiocManager::install("tximportData")
library(tximportData)
dir <- system.file("extdata", package="tximportData")
samples <- read.table(file.path(dir,"samples.txt"), header=TRUE)
files <- file.path(dir,"salmon", samples$run, "quant.sf.gz")
names(files) <- paste0("sample",1:6)
tx2gene <- read.csv(file.path(dir, "tx2gene.gencode.v27.csv"))
library(readr)
txi_raw <- tximport(files, type="salmon", tx2gene=tx2gene)
txi_raw$abundance[1:5, 1:5]
txi_raw$counts[1:5, 1:5]
txi_sca <- tximport(files, type="salmon", tx2gene=tx2gene, countsFromAbundance = "lengthScaledTPM")
txi_sca$abundance[1:5, 1:5]
txi_sca$counts[1:5, 1:5]
colSums(txi_sca$abundance)
colSums(txi_sca$counts)
boxplot(txi_sca$abundance)
boxplot(log2(txi_sca$abundance+1))
q()
shiny::runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
runApp('Desktop/shiny_test/img_test')
.libPaths()
q()
setwd("Desktop/cell-fate-predictor/")
library(scater)
library(Seurat)
?CreateSeuratObject
load("data/scrna_seq/PRJEB11202_SCE_norm.RData")
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = logcounts(sce),
meta.data = as.data.frame(colData(sce)))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
?ScaleData
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "VCX", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
FeaturePlot(sce, features = "VCY", reduction = "umap")
?FindClusters
?ScaleData
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 200)
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 200)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.8)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 1000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
?FindVariableFeatures
?FindClusters
?DoHeatmap
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"][-1]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
DoHeatmap(sce, features = y_genes)
DoHeatmap(sce)
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"][-1]
sce <- sce[y_genes, ]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
DoHeatmap(sce)
?VariableFeatures(sce)
?NormalizeData
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"][-1]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
#sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
VariableFeatures(sce) <- hvg_strict
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
FeaturePlot(sce, features = "VCX", reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
?PercentageFeatureSet
?ScaleData
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"]
mito_genes <- rowData(sce)$symbol[rowData(sce)$chr == "MT"]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- PercentageFeatureSet(sce, features = mito_genes, col.name = "percent.mt")
sce <- PercentageFeatureSet(sce, features = y_genes, col.name = "percent.y")
sce <- PercentageFeatureSet(sce, pattern = "^ERCC-", col.name = "percent.spike")
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, vars.to.regress = c("percent.mt", "percent.y"))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
FeaturePlot(sce, features = "VCX", reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"]
mito_genes <- rowData(sce)$symbol[rowData(sce)$chr == "MT"]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
FeaturePlot(sce, features = c("DDX3Y", "RPS4Y1", "TTTY15", "KDM5D"), reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- PercentageFeatureSet(sce, features = y_genes, col.name = "percent.y")
# Find var features and scale data
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce), vars.to.regress = "percent.y")
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
FeaturePlot(sce, features = c("DDX3Y", "RPS4Y1", "TTTY15", "KDM5D"), reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
# Remove genes in the Y chromosome
sce <- sce[!rowData(sce)$chr %in% c("Y"), ]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
# Find var features and scale data
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
FeaturePlot(sce, features = c("DDX3Y", "RPS4Y1", "TTTY15", "KDM5D"), reduction = "umap")
tmp <- VariableFeatures(sce)
"GATA3" %in% tmp
"KRT18" %in% tmp
# Differential gene expression analysis
dgea <- FindMarkers(sce, ident.1 = 1, ident.2 = NULL)
dges["GATA3",]
dgea["GATA3",]
dgea["KRT18",]
?FindMarkers
hist(dgea$avg_logFC)
sum(dgea$avg_logFC > 0.25)
sum(dgea$avg_logFC < -0.25)
FeaturePlot(sce, features = c("GATA3"), reduction = "umap")
ggplot(dgea, aes(avg_logFC)) + geom_histogram() + theme_bw()
ggplot(dgea, aes(avg_logFC)) + geom_histogram() + theme_classic()
ggplot(dgea, aes(avg_logFC)) + geom_histogram() +
labs(x = "Avg. log fold-change", y = "Counts") +
theme_classic(base_size = 15)
ggplot(dgea, aes(avg_logFC)) + geom_histogram(bins = 20) +
labs(x = "Avg. log fold-change", y = "Counts") +
theme_classic(base_size = 15)
sum(dgea$avg_logFC > 0.25 & dgea$p_val_adj < 0.01)
sum(dgea$avg_logFC < -0.25 & dgea$p_val_adj < 0.01)
sum(dgea$avg_logFC < -0.25 & dgea$p_val_adj < 0.001)
sum(dgea$avg_logFC > 0.25 & dgea$p_val_adj < 0.001)
# Select genes that are actve in each population
gata3_pos <- rownames(dgea)[dgea$avg_logFC > 0.25 & dgea$p_val_adj < 0.001]
gata3_neg <- rownames(dgea)[dgea$avg_logFC < -0.25 & dgea$p_val_adj < 0.001]
library(pheatmap)
dmatrix <- sce@assays$RNA[c(gata3_pos, gata3_neg),]
pheatmap(dmatrix)
DoHeatmap(sce, features = c(gata3_pos, gata3_neg))
save(sce, file = "results/Seurat_Morula.RData")
save(dgea, gata3_pos, gata3_neg, file = "results/DGEA.RData")
