?ScaleData
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "VCX", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
FeaturePlot(sce, features = "VCY", reduction = "umap")
?FindClusters
?ScaleData
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 200)
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 200)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.8)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 1000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
?FindVariableFeatures
?FindClusters
?DoHeatmap
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"][-1]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
DoHeatmap(sce, features = y_genes)
DoHeatmap(sce)
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"][-1]
sce <- sce[y_genes, ]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
DoHeatmap(sce)
?VariableFeatures(sce)
?NormalizeData
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"][-1]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
#sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
VariableFeatures(sce) <- hvg_strict
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
FeaturePlot(sce, features = "GATA3", reduction = "pca")
FeaturePlot(sce, features = "DDX3Y", reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
FeaturePlot(sce, features = "VCX", reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
?PercentageFeatureSet
?ScaleData
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"]
mito_genes <- rowData(sce)$symbol[rowData(sce)$chr == "MT"]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- PercentageFeatureSet(sce, features = mito_genes, col.name = "percent.mt")
sce <- PercentageFeatureSet(sce, features = y_genes, col.name = "percent.y")
sce <- PercentageFeatureSet(sce, pattern = "^ERCC-", col.name = "percent.spike")
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, vars.to.regress = c("percent.mt", "percent.y"))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = "GATA3", reduction = "umap")
FeaturePlot(sce, features = "DDX3Y", reduction = "umap")
FeaturePlot(sce, features = "VCX", reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
y_genes <- rowData(sce)$symbol[rowData(sce)$chr == "Y"]
mito_genes <- rowData(sce)$symbol[rowData(sce)$chr == "MT"]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
FeaturePlot(sce, features = c("DDX3Y", "RPS4Y1", "TTTY15", "KDM5D"), reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
sce <- PercentageFeatureSet(sce, features = y_genes, col.name = "percent.y")
# Find var features and scale data
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce), vars.to.regress = "percent.y")
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
FeaturePlot(sce, features = c("DDX3Y", "RPS4Y1", "TTTY15", "KDM5D"), reduction = "umap")
load("data/PRJEB11202_SCE_norm.RData")
# Remove genes in the Y chromosome
sce <- sce[!rowData(sce)$chr %in% c("Y"), ]
sce <- CreateSeuratObject(counts = counts(sce),
meta.data = as.data.frame(colData(sce)))
# Find var features and scale data
sce <- NormalizeData(sce)
sce <- FindVariableFeatures(sce, selection.method = "vst", nfeatures = 2000)
sce <- ScaleData(sce, features = rownames(sce))
# PCA
sce <- RunPCA(sce, features = VariableFeatures(object = sce), npcs = 30)
DimPlot(sce, reduction = "pca")
ElbowPlot(sce)
# KNN clustering using 10 dims of PCA space
sce <- FindNeighbors(sce, dims = 1:5)
sce <- FindClusters(sce, resolution = 0.2)
# UMAP plots of clusters and GATA3 expression
sce <- RunUMAP(sce, dims = 1:5, reduction = "pca")
DimPlot(sce, reduction = "umap")
FeaturePlot(sce, features = c("GATA3", "VCX"), reduction = "umap")
FeaturePlot(sce, features = c("DDX3Y", "RPS4Y1", "TTTY15", "KDM5D"), reduction = "umap")
tmp <- VariableFeatures(sce)
"GATA3" %in% tmp
"KRT18" %in% tmp
# Differential gene expression analysis
dgea <- FindMarkers(sce, ident.1 = 1, ident.2 = NULL)
dges["GATA3",]
dgea["GATA3",]
dgea["KRT18",]
?FindMarkers
hist(dgea$avg_logFC)
sum(dgea$avg_logFC > 0.25)
sum(dgea$avg_logFC < -0.25)
FeaturePlot(sce, features = c("GATA3"), reduction = "umap")
ggplot(dgea, aes(avg_logFC)) + geom_histogram() + theme_bw()
ggplot(dgea, aes(avg_logFC)) + geom_histogram() + theme_classic()
ggplot(dgea, aes(avg_logFC)) + geom_histogram() +
labs(x = "Avg. log fold-change", y = "Counts") +
theme_classic(base_size = 15)
ggplot(dgea, aes(avg_logFC)) + geom_histogram(bins = 20) +
labs(x = "Avg. log fold-change", y = "Counts") +
theme_classic(base_size = 15)
sum(dgea$avg_logFC > 0.25 & dgea$p_val_adj < 0.01)
sum(dgea$avg_logFC < -0.25 & dgea$p_val_adj < 0.01)
sum(dgea$avg_logFC < -0.25 & dgea$p_val_adj < 0.001)
sum(dgea$avg_logFC > 0.25 & dgea$p_val_adj < 0.001)
# Select genes that are actve in each population
gata3_pos <- rownames(dgea)[dgea$avg_logFC > 0.25 & dgea$p_val_adj < 0.001]
gata3_neg <- rownames(dgea)[dgea$avg_logFC < -0.25 & dgea$p_val_adj < 0.001]
library(pheatmap)
dmatrix <- sce@assays$RNA[c(gata3_pos, gata3_neg),]
pheatmap(dmatrix)
DoHeatmap(sce, features = c(gata3_pos, gata3_neg))
save(sce, file = "results/Seurat_Morula.RData")
save(dgea, gata3_pos, gata3_neg, file = "results/DGEA.RData")
library("ggplot2")
load("~/Desktop/cell-fate-predictor/results/DGEA.RData")
ggplot(dgea, aes(avg_logFC)) + geom_histogram(bins = 20) +
labs(x = "Avg. log fold-change", y = "Counts") +
theme_classic(base_size = 15)
library(dplyr)
library(readr)
rnet <- read_tsv("data/annotated_regions.txt")
rnet
rnet[3, ]
rnet$`Nearest PromoterID`[3]
filter(rnet, `Nearest PromoterID` != "N/A")
rnet <- filter(rnet, `Nearest PromoterID` != "N/A")
length(unique(rnet$`Nearest PromoterID`))
sum(rnet$`Nearest PromoterID` == "GATA3")
rnet %>% filter(`Nearest PromoterID` == "GATA3", )
rnet %>% filter(`Nearest PromoterID` == "POU5F1", )
load("results/DGEA.RData")
unique(rnet$TF)
unique(sapply(strsplit(TF, "[.]"), `[`, 3))
unique(sapply(strsplit(rnet$TF, "[.]"), `[`, 3))
# Some parsing of the TF column
rnet <- rnet %>%
mutate(TF = sapply(strsplit(TF, "[.]"), `[`, 3)) %>%
mutate(TF = sapply(strsplit(TF, "("), `[`, 1)) %>%
mutate(TF = toupper(TF))
rnet <- read_tsv("data/annotated_regions.txt") %>%
filter(`Nearest PromoterID` != "N/A")
# Some parsing of the TF column
rnet <- rnet %>%
mutate(TF = sapply(strsplit(TF, "[.]"), `[`, 3)) %>%
mutate(TF = sapply(strsplit(TF, "[(]"), `[`, 1)) %>%
mutate(TF = toupper(TF))
rnet
unique(rnet$TF)
rnet_g3_pos <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_pos) %>%
select(TF, `Nearest PromoterID`)
rnet_g3_pos
rnet_g3_pos <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_pos) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
rnet_g3_pos <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_pos) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
rnet_g3_pos %>% filte(Gene = "GATA3")
rnet_g3_pos %>% filter(Gene = "GATA3")
rnet_g3_pos
rnet_g3_pos <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_pos) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
rnet_g3_neg <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_neg) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
rnet_g3_pos
rnet_g3_pos %>% filter(Gene == "GATA3")
sort(gata3_neg)
sort(gata3_pos)
sort(unique(rnet_g3_pos$TF))
rnet_g3_pos %>% filter(TF == "SOX2")
rnet_g3_pos %>% filter(TF == "POU5F1::SOX2")
rnet_g3_pos %>% filter(TF == "GATA3")
# Focus on TFs that are expressed in each cell population
library(Seurat)
load("results/Seurat_Morula.RData")
sce$orig.ident
sce@active.ident
strsplit(SMAD2::SMAD3::SMAD4, "[::]")[[1]]
strsplit(SMAD2::SMAD3::SMAD4, "::")[[1]]
strsplit("SMAD2::SMAD3::SMAD4", "[::]")[[1]]
strsplit("SMAD2::SMAD3::SMAD4", "::")[[1]]
sce@assays$RNA[1:5, 1:5]
rownames(sce)
calc_avg_expr <- function(expr, gene, cl){
gene <- strsplit(gene, "::")[[1]]
# Get the expression of the genes in cluster cl
idx <- gene %in% rownames(sce)
expr_mtx <- expr@assays$RNA[gene[idx], expr@active.ident == cl]
avg_expr <- rowMeans(expr_mtx)
return(mean(avg_expr))
}
calc_avg_expr(sce, "SMAD2::SMAD3::SMAD4", 1)
gene <- strsplit("SMAD2::SMAD3::SMAD4", "::")[[1]]
gene
idx <- gene %in% rownames(sce)
idx
expr_mtx <- sce@assays$RNA[gene[idx], sce@active.ident == 1]
expr_mtx
dim(expr_mtx)
rowMeans(expr_mtx)
library(Matrix)
rowMeans(expr_mtx)
calc_avg_expr <- function(expr, gene, cl){
gene <- strsplit(gene, "::")[[1]]
# Get the expression of the genes in cluster cl
idx <- gene %in% rownames(expr)
expr_mtx <- expr@assays$RNA[gene[idx], expr@active.ident == cl]
avg_expr <- rowMeans(expr_mtx)
return(mean(avg_expr))
}
calc_avg_expr <- function(gene, expr, cl){
gene <- strsplit(gene, "::")[[1]]
# Get the expression of the genes in cluster cl
idx <- gene %in% rownames(expr)
expr_mtx <- expr@assays$RNA[gene[idx], expr@active.ident == cl]
avg_expr <- rowMeans(expr_mtx)
return(mean(avg_expr))
}
sapply(c("GATA3", ""SMAD2::SMAD3::SMAD4""), calc_avg_expr, sce, 1)
sapply(c("GATA3", "SMAD2::SMAD3::SMAD4"), calc_avg_expr, sce, 1)
rnet_g3_pos <- rnet_g3_pos %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 1))
rnet_g3_pos
"SOX8" %in% rownames(sce)
hist(rnet_g3_pos$TF_expr)
rnet_g3_pos %>% filter(Gene == "GATA3")
median(rnet_g3_pos$TF_expr)
rnet_g3_pos <- rnet_g3_pos %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 1)) %>%
filter(!is.na(TF_expr))
median(rnet_g3_pos$TF_expr)
rnet_g3_neg <- rnet_g3_neg %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 0)) %>%
filter(!is.na(TF_expr))
library(dplyr)
library(readr)
load("results/DGEA.RData")
rnet <- read_tsv("data/annotated_regions.txt") %>%
filter(`Nearest PromoterID` != "N/A")
# Some parsing of the TF column
rnet <- rnet %>%
mutate(TF = sapply(strsplit(TF, "[.]"), `[`, 3)) %>%
mutate(TF = sapply(strsplit(TF, "[(]"), `[`, 1)) %>%
mutate(TF = toupper(TF))
# Regulatory network construction
rnet_g3_pos <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_pos) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
rnet_g3_neg <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_neg) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
# Focus on TFs that are expressed in each cell population
library(Seurat)
library(Matrix)
load("results/Seurat_Morula.RData")
calc_avg_expr <- function(gene, expr, cl){
gene <- strsplit(gene, "::")[[1]]
# Get the expression of the genes in cluster cl
idx <- gene %in% rownames(expr)
expr_mtx <- expr@assays$RNA[gene[idx], expr@active.ident == cl]
avg_expr <- rowMeans(expr_mtx)
return(mean(avg_expr))
}
rnet_g3_pos <- rnet_g3_pos %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 1)) %>%
filter(!is.na(TF_expr))
rnet_g3_neg <- rnet_g3_neg %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 0)) %>%
filter(!is.na(TF_expr))
library(dplyr)
library(readr)
load("results/DGEA.RData")
rnet <- read_tsv("data/annotated_regions.txt") %>%
filter(`Nearest PromoterID` != "N/A")
# Some parsing of the TF column
rnet <- rnet %>%
mutate(TF = sapply(strsplit(TF, "[.]"), `[`, 3)) %>%
mutate(TF = sapply(strsplit(TF, "[(]"), `[`, 1)) %>%
mutate(TF = toupper(TF))
# Regulatory network construction
rnet_g3_pos <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_pos) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
rnet_g3_neg <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_neg) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
# Focus on TFs that are expressed in each cell population
library(Seurat)
library(Matrix)
load("results/Seurat_Morula.RData")
calc_avg_expr <- function(gene, expr, cl){
gene <- strsplit(gene, "::")[[1]]
# Get the expression of the genes in cluster cl
idx <- gene %in% rownames(expr)
expr_mtx <- expr@assays$RNA[gene[idx], expr@active.ident == cl]
avg_expr <- rowMeans(expr_mtx)
return(mean(avg_expr))
}
rnet_g3_pos <- rnet_g3_pos %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 1)) %>%
filter(!is.na(TF_expr)) %>%
filter(TF_expr > median(TF_expr))
rnet_g3_neg <- rnet_g3_neg %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 0)) %>%
filter(!is.na(TF_expr)) %>%
filter(TF_expr > median(TF_expr))
rnet_g3_pos
pos_nodes <- union(rnet_g3_pos$Gene, rnet_g3_pos$TF)
neg_nodes <- union(rnet_g3_neg$Gene, rnet_g3_neg$TF)
sort(pos_nodes)
dd <- intersect(pos_nodes, neg_nodes)
library(dplyr)
library(readr)
load("results/DGEA.RData")
rnet <- read_tsv("data/annotated_regions.txt") %>%
filter(`Nearest PromoterID` != "N/A")
# Some parsing of the TF column
rnet <- rnet %>%
mutate(TF = sapply(strsplit(TF, "[.]"), `[`, 3)) %>%
mutate(TF = sapply(strsplit(TF, "[(]"), `[`, 1)) %>%
mutate(TF = toupper(TF))
# Regulatory network construction
rnet_g3_pos <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_pos) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
rnet_g3_neg <- rnet %>%
filter(`Nearest PromoterID` %in% gata3_neg) %>%
select(TF, `Nearest PromoterID`) %>%
rename(Gene = `Nearest PromoterID`)
# Focus on TFs that are expressed in each cell population
library(Seurat)
library(Matrix)
load("results/Seurat_Morula.RData")
calc_avg_expr <- function(gene, expr, cl){
gene <- strsplit(gene, "::")[[1]]
# Get the expression of the genes in cluster cl
idx <- gene %in% rownames(expr)
expr_mtx <- expr@assays$RNA[gene[idx], expr@active.ident == cl]
avg_expr <- rowMeans(expr_mtx)
return(mean(avg_expr))
}
rnet_g3_pos <- rnet_g3_pos %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 1)) %>%
filter(!is.na(TF_expr)) %>%
filter(TF_expr > median(TF_expr)) %>%
mutate(pop = "GATA+")
pos_nodes <- union(rnet_g3_pos$Gene, rnet_g3_pos$TF)
rnet_g3_neg <- rnet_g3_neg %>%
mutate(TF_expr = sapply(TF, calc_avg_expr, sce, 0)) %>%
filter(!is.na(TF_expr)) %>%
filter(TF_expr > median(TF_expr)) %>%
mutate(pop = "GATA-")
neg_nodes <- union(rnet_g3_neg$Gene, rnet_g3_neg$TF)
rnet_g3 <- bind_rows(rnet_g3_pos, rnet_g3_neg)
write_tsv(rnet_g3, "results/rnet_g3.tsv")
save(rnet_g3, pos_nodes, neg_nodes, file = "results/reg_net.RData")
write(pos_nodes, file = "results/nodes_pos_rnet.txt")
write(neg_nodes, file = "results/nodes_neg_rnet.txt")
q()
